# Git Talk

研发部-童帅
25 Aug 2022
tongshuai@discoveringgroup.com

## What Is VCS (Version control system)

版本控制是一种记录文件内容变化，在将来能够方便查阅特定版本修订情况的系统

主要特性：

- 回退状态
- 比对文件变化差异
- 记录提交变更日志
- 恢复文件

## Why Should You Use It

如果不使用版本控制系统，通常大家手动实现版本控制的方式：

- 复制整个项目目录，加上备份时间以示区别
- 拷贝到不同的存储设备进行备份

这些方式简单但是容易造成混淆出错，甚至丢失文件

## What Is Git

*git* 是 2005 发布最初用于 *Linux* 内核开发的版本控制工具

[https://git-scm.com/](https://git-scm.com/)

主要特性：

- 速度
- 简单的设计
- 对非线性开发模式的强力支持（允许成千上万个并行开发的分支）
- 完全分布式
- 有能力高效管理类似 Linux 内核一样的超大规模项目（速度和数据量）

// ## What Is Git

// - 直接记录快照，而非差异比较
// - 近乎所有操作都是本地执行
// - Git 保证完整性
// - Git 一般只添加数据

## What Is Git

.image ./images/git-distributed.png _ 470

## What Is Git

Git 文件的三种状态

- 已修改（modified）
    - 已修改表示修改了文件，但还没保存到数据库中
- 已暂存（staged）
    - 已暂存表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。
- 已提交（committed）
    - 已提交表示数据已经安全地保存在本地数据库中。

## What Is Git

这会让我们的 Git 项目拥有三个阶段：*工作区*、*暂存区*、 *Git 目录*

.image ./images/areas.png _ 800

## What Is Git

文件的状态变化周期

.image ./images/lifecycle.png _ 900

## How To Use It

配置 Git 用户信息

```shell

提交会使用这些信息，它们会写入到你的每一次提交中，不可更改
--global 选项表示该配置项全局生效

git config --global user.name "John Doe"
git config --global user.email johndoe@example.com

查看配置
git config --list --show-origin
```

.play ./code/print_config.go /^func main/,/^}/

## How To Use It

获取 Git 仓库

将尚未进行版本控制的本地目录转换为 Git 仓库

```shell

git init

添加远程 Git 服务器（Optional）
git remote add origin git@git.discoveringgroup.com:docs/git-talk.git
```

从其它服务器 克隆 一个已存在的 Git 仓库，HTTP 协议 or Git 协议

```shell

使用账号密码
git clone https://git.discoveringgroup.com/docs/git-talk.git

使用 SSH 密钥
git clone git@git.discoveringgroup.com:docs/git-talk.git

or 重命名本地目录

git clone git@git.discoveringgroup.com:docs/git-talk.git my-git-talk
```

## How To Use It

忽略文件 *.gitignore* [https://github.com/github/gitignore](https://github.com/github/gitignore)

有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表

```shell

    *.py[cod]
    *.csv

    .project
    .pydevproject
    .DS_Store
    .python-version

    dist
    build

    logs/
    doc/**/*.pdf

    !/setup.py

```

## How To Use It

常用命令

```shell

检查当前文件状态
git status

跟踪文件（暂存状态）
git add

对比文件差异
git diff

提交更新至本地 Git 仓库
git commit -m "提交日志"

获取服务器更新至本地 (自动尝试合并到当前所在的分支)
git pull

推送本地仓库至服务器
git push

查看提交历史 or 显示最近两次提交的差异(--patch): git log -p -2
git log

```

## How To Use It

常用命令

```shell

查看远程仓库信息
git remote -v

添加远程仓库
git remote add [自定义简写] [远程仓库地址]
git remote add origin https://git.discoveringgroup.com/docs/git-talk.git

移除远程仓库
git remote remove origin

```

## How To Use It

撤销操作

```shell

重新提交，适合提交信息写错或者漏提交了文件需要补的情况
git commit --amend

取消暂存的文件（回退状态）
git reset

回退到上一个版本: git reset --hard HEAD^
回退到上上个版本: git reset --hard HEAD^^
回退到某一次提交: git reset --hard [commit sha1]

撤消对文件的修改
git checkout README.md
```

## How To Use It

基本的 Git 工作流程如下：

- 在 *工作区* 中修改文件
- 暂存已经更新的文件
- 提交更新，Git 对 *暂存区* 的文件进行快照并将快照永久性存储到 *Git 目录*
- 推送本地仓库至 Git 服务器（Optional）

## How To Use It

操作示例

: cd git-talk && git init
: git remote add origin git@git.discoveringgroup.com:docs/git-talk.git

```shell

git clone https://git.discoveringgroup.com/docs/git-talk.git

检查当前文件状态
git status

echo "Hello" > README.md

git status

跟踪当前目录下所有文件至 暂存 状态 or 跟踪指定文件: git add README.md
git add .

git status

提交更新
git commit -m "add README"

git push origin master

git status
```

## How To Use It

操作示例

```shell

echo "Hello World" > README.md

git status

查看差异 or 查看指定文件差异: git diff README.md
git diff

提交更新
git commit -m "update README"

git push origin master

git log
```

## 使用建议

- 尽量使用命令行 `git`
- 定义好忽略文件 .gitignore
- 每次提交前使用 `git pull` 获取最新代码（多人协作模式）
- 每次提交前使用 `git status` 确认变更
- 每次提交前使用 `git diff` 对代码进行一次 `code review`
- 写好提交日志
- One commit a day keep doctor away

## 进阶概念

[https://git-scm.com/book/zh/v2](https://git-scm.com/book/zh/v2)

- 标签 Tag
- 临时保存 Stash
- 分支 Branch
- 分支开发工作流程
- 合并请求 Merge Request
- 子模块 Sub Module
- 持续集成/持续部署 CI/CD
